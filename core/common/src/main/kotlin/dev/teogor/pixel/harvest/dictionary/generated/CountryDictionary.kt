package dev.teogor.pixel.harvest.dictionary.generated

import dev.teogor.pixel.harvest.dictionary.Dictionary

private val africaSet = setOf(
    "algeria",
    "angola",
    "benin",
    "botswana",
    "burkina faso",
    "burundi",
    "cabo verde",
    "cameroon",
    "central african republic",
    "chad",
    "comoros",
    "congo",
    "côte d'ivoire",
    "djibouti",
    "egypt",
    "equatorial guinea",
    "eritrea",
    "eswatini",
    "ethiopia",
    "gabon",
    "gambia",
    "ghana",
    "guinea",
    "guinea-bissau",
    "kenya",
    "lesotho",
    "liberia",
    "libya",
    "madagascar",
    "malawi",
    "mali",
    "mauritania",
    "mauritius",
    "morocco",
    "mozambique",
    "namibia",
    "niger",
    "nigeria",
    "rwanda",
    "são tomé and príncipe",
    "senegal",
    "seychelles",
    "sierra leone",
    "somalia",
    "south africa",
    "south sudan",
    "sudan",
    "tanzania",
    "togo",
    "tunisia",
    "uganda",
    "zambia",
    "zimbabwe",
)

private val asiaSet = setOf(
    "afghanistan",
    "armenia",
    "azerbaijan",
    "bahrain",
    "bangladesh",
    "bhutan",
    "brunei",
    "cambodia",
    "china",
    "cyprus",
    "georgia",
    "india",
    "indonesia",
    "iran",
    "iraq",
    "israel",
    "japan",
    "jordan",
    "kazakhstan",
    "kuwait",
    "kyrgyzstan",
    "laos",
    "lebanon",
    "malaysia",
    "maldives",
    "mongolia",
    "myanmar",
    "nepal",
    "north korea",
    "oman",
    "pakistan",
    "palestine",
    "philippines",
    "qatar",
    "russia",
    "saudi arabia",
    "singapore",
    "south korea",
    "sri lanka",
    "syria",
    "taiwan",
    "tajikistan",
    "thailand",
    "timor-leste",
    "turkey",
    "turkmenistan",
    "united arab emirates",
    "uzbekistan",
    "vietnam",
    "yemen",
)

private val europeSet = setOf(
    "albania",
    "andorra",
    "austria",
    "belarus",
    "belgium",
    "bosnia and herzegovina",
    "bulgaria",
    "croatia",
    "czech republic",
    "denmark",
    "estonia",
    "finland",
    "france",
    "germany",
    "greece",
    "hungary",
    "iceland",
    "ireland",
    "italy",
    "kosovo",
    "latvia",
    "liechtenstein",
    "lithuania",
    "luxembourg",
    "malta",
    "moldova",
    "monaco",
    "montenegro",
    "netherlands",
    "north macedonia",
    "norway",
    "poland",
    "portugal",
    "romania",
    "san marino",
    "serbia",
    "slovakia",
    "slovenia",
    "spain",
    "sweden",
    "switzerland",
    "ukraine",
    "united kingdom",
    "vatican city",
)

private val northAmericaSet = setOf(
    "antigua and barbuda",
    "bahamas",
    "barbados",
    "belize",
    "canada",
    "costa rica",
    "cuba",
    "dominica",
    "dominican republic",
    "el salvador",
    "grenada",
    "guatemala",
    "haiti",
    "honduras",
    "jamaica",
    "mexico",
    "nicaragua",
    "panama",
    "saint kitts and nevis",
    "saint lucia",
    "saint vincent and the grenadines",
    "trinidad and tobago",
    "united states",
)

private val oceaniaSet = setOf(
    "australia",
    "fiji",
    "kiribati",
    "marshall islands",
    "micronesia",
    "nauru",
    "new zealand",
    "palau",
    "papua new guinea",
    "samoa",
    "solomon islands",
    "tonga",
    "tuvalu",
    "vanuatu",
)

private val southAmericaSet = setOf(
    "argentina",
    "bolivia",
    "brazil",
    "chile",
    "colombia",
    "ecuador",
    "guyana",
    "paraguay",
    "peru",
    "suriname",
    "uruguay",
    "venezuela",
)

class CountryDictionary(list: Set<String>) : Dictionary(list) {
    class CountryDictionaryBuilder : Builder()

    enum class CountryTypes(private val countrySet: Set<String>) : Type {
        AFRICA(africaSet),
        ASIA(asiaSet),
        EUROPE(europeSet),
        NORTH_AMERICA(northAmericaSet),
        OCEANIA(oceaniaSet),
        SOUTH_AMERICA(southAmericaSet),
        ALL(africaSet + asiaSet + europeSet + northAmericaSet + oceaniaSet + southAmericaSet);

        override fun getSet(): Set<String> {
            return countrySet
        }
    }

    companion object {
        fun builder(block: CountryDictionaryBuilder.() -> Unit): CountryDictionary {
            val builder = CountryDictionaryBuilder()
            builder.block()
            return CountryDictionary(builder.build().list)
        }
    }

}
